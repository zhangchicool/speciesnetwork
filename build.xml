<!-- Build SpeciesNetwork. JUnit test is available for this build. -->
<project basedir="." default="build_jar_all_speciesnetwork" name="BUILD_SpeciesNetwork">
	<description>
	    Build SpeciesNetwork.
	</description>

	<!-- set global properties for this build -->
	<property name="srcspeciesnetwork" location="src" />
	<property name="buildspeciesnetwork" location="build" />
	<property name="libspeciesnetwork" location="lib" />
	<property name="release_dir" value="release" />
	<property name="distspeciesnetwork" location="${buildspeciesnetwork}/dist" />
	<property name="beast2path" location="../beast2" />
	<property name="libBeast2" location="${beast2path}/lib" />
	<property name="srcBeast2" location="${beast2path}/src" />
	<property name="beast2classpath" location="${beast2path}/build" />
	<property name="package_dir" value="${release_dir}/package" />

    <import file="${beast2path}/build.xml" />

	<property name="main_class_BEAST" value="beast.app.BeastMCMC" />
	<property name="report" value="${buildspeciesnetwork}/junitreport" />

	<path id="classpath">
        <pathelement path="${buildspeciesnetwork}" />
		<fileset dir="${libBeast2}" includes="*.jar" />
		<fileset dir="${libBeast2}/junit" includes="*.jar" />
		<fileset dir="${libspeciesnetwork}" includes="*.jar" />
        <pathelement path="${beast2classpath}" />
		<pathelement path="../BeastFX/build" />
	</path>

	<!-- start -->
	<target name="initspeciesnetwork">
		<echo message="${ant.project.name}: ${ant.file}" />
	</target>

	<target name="cleanspeciesnetwork">
    	<delete dir="${buildspeciesnetwork}" />
	</target>

	<!-- clean previous build, and then compile Java source code, and Juint test -->
	<target name="build_all_speciesnetwork" depends="cleanspeciesnetwork,compile-allspeciesnetwork,junitspeciesnetwork"
        description="Clean and Build all run-time stuff">
	</target>

	<!-- clean previous build, compile Java source code, and Junit test, and make the speciesnetwork.jar -->
	<target name="build_jar_all_speciesnetwork" depends="cleanspeciesnetwork,compile-allspeciesnetwork,junitspeciesnetwork,dist_all_speciesnetwork"
        description="Clean and Build all run-time stuff">
	</target>

	<!-- No JUnit Test, clean previous build, compile Java source code, and make the speciesnetwork.jar -->
	<target name="build_jar_all_speciesnetwork_NoJUnitTest" depends="cleanspeciesnetwork,compile-allspeciesnetwork,dist_all_speciesnetwork"
        description="Clean and Build all run-time stuff">
	</target>

	<!-- compile Java source code -->
	<target name="compile-allspeciesnetwork" depends="initspeciesnetwork">
	    <!-- Capture the path as a delimited property using the refid attribute -->
	    <property name="myclasspath" refid="classpath" />
	    <!-- Emit the property to the ant console -->
	    <echo message="Classpath = ${myclasspath}" />

		<mkdir dir="${buildspeciesnetwork}" />

		<!-- Compile the java code from ${srcspeciesnetwork} into ${buildspeciesnetwork} /bin -->
		<javac srcdir="${srcspeciesnetwork}" destdir="${buildspeciesnetwork}" classpathref="classpath"
			   debug="true"
		       fork="true"
		       memoryinitialsize="256m"
		       memorymaximumsize="256m"
			   includeAntRuntime='false'>
			<include name="**/**" />
		</javac>
		<echo message="Successfully compiled." />
	</target>

	<!-- make speciesnetwork.jar and speciesnetwork.src.jar -->
	<target name="dist_all_speciesnetwork" depends="compile-allspeciesnetwork" description="create speciesnetwork jar">
		<!-- Create the distribution directory -->
		<mkdir dir="${distspeciesnetwork}" />

		<!-- Put everything in ${buildspeciesnetwork} into the beast.jar file -->
		<jar jarfile="${distspeciesnetwork}/speciesnetwork.jar">
			<manifest>
				<attribute name="Built-By" value="${user.name}" />
				<attribute name="Main-Class" value="${main_class_BEAST}" />
			</manifest>
			<fileset dir="${buildspeciesnetwork}">
				<include name="**/*.class" />
				<include name="**/*.java" />
			</fileset>
		</jar>
		<jar jarfile="${distspeciesnetwork}/speciesnetwork.src.jar">
			<fileset dir="${srcspeciesnetwork}">
				<include name="**/*.java" />
			</fileset>
        </jar>
		<jar jarfile="${distspeciesnetwork}/speciesnetwork.package.jar">
			<manifest>
				<attribute name="Built-By" value="${user.name}" />
			</manifest>
			<fileset dir="${buildspeciesnetwork}">
				<include name="**/*.class" />
			</fileset>
		</jar>
	</target>

	<!-- JUnit test -->
	<target name="junitspeciesnetwork">
		<mkdir dir="${report}" />
		<junit printsummary="yes"> <!--showoutput='yes'-->
			<classpath>
				<path refid="classpath" />
				<path location="${buildspeciesnetwork}" />
			</classpath>

			<formatter type="xml" />

			<test fork="yes" todir="${report}" name="snetworktests.AllTests" />
		</junit>
		<echo message="JUnit test finished." />
	</target>

    <target name="junitreport">
		<junitreport todir="${report}">
			<fileset dir="${report}" includes="*.xml" />
			<report format="frames" todir="${report}" />
		</junitreport>
		<echo message="JUnit test report finished." />
	</target>

	<target name="package"
	        depends="build_jar_all_speciesnetwork_NoJUnitTest"
	        description="release speciesnetwork package">

		<delete dir="${package_dir}" />
		<!-- Create the release directory -->
		<mkdir dir="${package_dir}" />
		<mkdir dir="${package_dir}/lib" />
		<mkdir dir="${package_dir}/examples" />
		<mkdir dir="${package_dir}/fxtemplates" />

		<copy todir="${package_dir}">
			<fileset file="version.xml" />
		</copy>
		<copy todir="${package_dir}">
			<fileset dir="${distspeciesnetwork}" includes="speciesnetwork.src.jar" />
		</copy>
		<copy todir="${package_dir}/lib">
			<fileset dir="${distspeciesnetwork}" includes="speciesnetwork.package.jar" />
			<fileset dir="${libspeciesnetwork}" includes="guava-*.jar" />
		</copy>
		<copy todir="${package_dir}/examples">
			<fileset dir="examples" />
		</copy>
		<copy todir="${package_dir}/fxtemplates">
			<fileset dir="fxtemplates" />
		</copy>

		<jar jarfile="${distspeciesnetwork}/speciesnetwork.package.zip">
			<fileset dir="${package_dir}">
				<include name="**/*" />
			</fileset>
        </jar>
		<echo message="Package version release is finished." />
	</target>

</project>
